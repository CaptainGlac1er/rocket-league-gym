:py:mod:`rlgym.utils.obs_builders.obs_builder`
==============================================

.. py:module:: rlgym.utils.obs_builders.obs_builder

.. autoapi-nested-parse::

   The observation builder.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   rlgym.utils.obs_builders.obs_builder.ObsBuilder




.. py:class:: ObsBuilder

   Bases: :py:obj:`abc.ABC`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:method:: get_obs_space() -> gym.spaces.Space

      Function that returns the observation space type. It will be called during the initialization of the environment.

      :return: The type of the observation space


   .. py:method:: reset(initial_state: rlgym.utils.gamestates.GameState)
      :abstractmethod:

      Function to be called each time the environment is reset. Note that this does not need to return anything,
      the environment will call `build_obs` automatically after reset, so the initial observation for a policy will be
      constructed in the same way as every other observation.

      :param initial_state: The initial game state of the reset environment.


   .. py:method:: pre_step(state: rlgym.utils.gamestates.GameState)

      Function to pre-compute values each step. This function is called only once each step, before build_obs is
      called for each player.

      :param state: The current state of the game.


   .. py:method:: build_obs(player: rlgym.utils.gamestates.PlayerData, state: rlgym.utils.gamestates.GameState, previous_action: numpy.ndarray) -> Any
      :abstractmethod:

      Function to build observations for a policy. This is where all observations will be constructed every step and
      every reset. This function is given a player argument, and it is expected that the observation returned by this
      function will contain information from the perspective of that player. This function is called once for each
      agent automatically at every step.

      :param player: The player to build an observation for. The observation returned should be from the perspective of
      this player.

      :param state: The current state of the game.
      :param previous_action: The action taken at the previous environment step.

      :return: An observation for the player provided.



