:py:mod:`rlgym.utils.terminal_conditions.terminal_condition`
============================================================

.. py:module:: rlgym.utils.terminal_conditions.terminal_condition

.. autoapi-nested-parse::

   A terminal condition.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   rlgym.utils.terminal_conditions.terminal_condition.TerminalCondition




.. py:class:: TerminalCondition

   Bases: :py:obj:`abc.ABC`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:method:: reset(initial_state: rlgym.utils.gamestates.GameState)
      :abstractmethod:

      Function to be called each time the environment is reset.

      :param initial_state: The initial state of the reset environment.


   .. py:method:: is_terminal(current_state: rlgym.utils.gamestates.GameState) -> bool
      :abstractmethod:

      Function to determine if a game state is terminal. This will be called once per step, and must return either
      `True` or `False` if the current episode should be terminated at this state.

      :param current_state: The current state of the game.

      :return: Bool representing whether the current state is a terminal one.



