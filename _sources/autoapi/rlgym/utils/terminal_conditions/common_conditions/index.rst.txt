:py:mod:`rlgym.utils.terminal_conditions.common_conditions`
===========================================================

.. py:module:: rlgym.utils.terminal_conditions.common_conditions

.. autoapi-nested-parse::

   A module containing implementations of common terminal conditions.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   rlgym.utils.terminal_conditions.common_conditions.TimeoutCondition
   rlgym.utils.terminal_conditions.common_conditions.NoTouchTimeoutCondition
   rlgym.utils.terminal_conditions.common_conditions.GoalScoredCondition
   rlgym.utils.terminal_conditions.common_conditions.BallTouchedCondition




.. py:class:: TimeoutCondition(max_steps)

   Bases: :py:obj:`rlgym.utils.terminal_conditions.TerminalCondition`

   A condition that will terminate an episode after some number of steps.

   .. py:method:: reset(initial_state)

      Reset the step counter.


   .. py:method:: is_terminal(current_state)

      Increment the current step counter and return `True` if `max_steps` have passed.



.. py:class:: NoTouchTimeoutCondition(max_steps)

   Bases: :py:obj:`TimeoutCondition`

   A condition that will terminate an episode after some number of steps.

   .. py:method:: is_terminal(current_state)

      Increment the current step counter and return `True` if `max_steps` have passed.



.. py:class:: GoalScoredCondition

   Bases: :py:obj:`rlgym.utils.terminal_conditions.TerminalCondition`

   A condition that will terminate an episode as soon as a goal is scored by either side.

   .. py:method:: reset(initial_state)

      Function to be called each time the environment is reset.

      :param initial_state: The initial state of the reset environment.


   .. py:method:: is_terminal(current_state)

      Check to see if the game score for either team has been changed. If either score has changed, update the current
      known scores for both teams and return `True`. Note that the known game scores are never reset for this object
      because the game score is not set to 0 for both teams at the beginning of an episode.



.. py:class:: BallTouchedCondition

   Bases: :py:obj:`rlgym.utils.terminal_conditions.TerminalCondition`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:method:: reset(initial_state)

      Function to be called each time the environment is reset.

      :param initial_state: The initial state of the reset environment.


   .. py:method:: is_terminal(current_state)

      Return `True` if the last touch does not have the same ID as the last touch from the initial state.



