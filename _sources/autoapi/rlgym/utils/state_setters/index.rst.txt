:py:mod:`rlgym.utils.state_setters`
===================================

.. py:module:: rlgym.utils.state_setters


Subpackages
-----------
.. toctree::
   :titlesonly:
   :maxdepth: 3

   wrappers/index.rst


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   default_state/index.rst
   random_state/index.rst
   state_setter/index.rst
   state_wrapper/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   rlgym.utils.state_setters.StateSetter
   rlgym.utils.state_setters.DefaultState
   rlgym.utils.state_setters.RandomState




.. py:class:: StateSetter

   Bases: :py:obj:`abc.ABC`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:method:: build_wrapper(max_team_size: int, spawn_opponents: bool) -> rlgym.utils.state_setters.wrappers.state_wrapper.StateWrapper

      Function to be called each time the environment is reset.

      :param max_team_size: The maximum supported team size in the current rlgym instance.
      :param spawn_opponents: If the user expects agents in the orange side or not, only provided for backwards compatibility.

      :returns: The StateWrapper object that will be received in StateSetter.reset(), any team shapes are supported as
      long as team size is smaller or equal to max_team_size


   .. py:method:: reset(state_wrapper: rlgym.utils.state_setters.wrappers.state_wrapper.StateWrapper)
      :abstractmethod:

      Function to be called each time the environment is reset.

      :param state_wrapper: StateWrapper object to be modified with desired state values.

      NOTE: This function should change any desired values of the StateWrapper, which are all defaulted to 0.
      The values within StateWrapper are sent to the game each time the match is reset.



.. py:class:: DefaultState

   Bases: :py:obj:`rlgym.utils.state_setters.StateSetter`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:attribute:: SPAWN_BLUE_POS
      :value: [None, None, None, None, None]

      

   .. py:attribute:: SPAWN_BLUE_YAW

      

   .. py:attribute:: SPAWN_ORANGE_POS
      :value: [[2048, 2560, 17], None, [256, 3840, 17], None, [0, 4608, 17]]

      

   .. py:attribute:: SPAWN_ORANGE_YAW

      

   .. py:method:: reset(state_wrapper: rlgym.utils.state_setters.StateWrapper)

      Modifies state_wrapper values to emulate a randomly selected default kickoff.

      :param state_wrapper: StateWrapper object to be modified with desired state values.



.. py:class:: RandomState(ball_rand_speed: bool = False, cars_rand_speed: bool = False, cars_on_ground: bool = True)

   Bases: :py:obj:`rlgym.utils.state_setters.StateSetter`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:method:: reset(state_wrapper: rlgym.utils.state_setters.StateWrapper)

      Modifies the StateWrapper to contain random values the ball and each car.

      :param state_wrapper: StateWrapper object to be modified with desired state values.


   .. py:method:: _reset_ball_random(state_wrapper: rlgym.utils.state_setters.StateWrapper, random_speed: bool)

      Function to set the ball to a random position.

      :param state_wrapper: StateWrapper object to be modified.
      :param random_speed: Boolean indicating whether to randomize velocity values.


   .. py:method:: _reset_cars_random(state_wrapper: rlgym.utils.state_setters.StateWrapper, on_ground: bool, random_speed: bool)

      Function to set all cars to a random position.

      :param state_wrapper: StateWrapper object to be modified.
      :param on_ground: Boolean indicating whether to place cars only on the ground.
      :param random_speed: Boolean indicating whether to randomize velocity values.



