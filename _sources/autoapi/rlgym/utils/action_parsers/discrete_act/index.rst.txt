:py:mod:`rlgym.utils.action_parsers.discrete_act`
=================================================

.. py:module:: rlgym.utils.action_parsers.discrete_act


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   rlgym.utils.action_parsers.discrete_act.DiscreteAction




.. py:class:: DiscreteAction(n_bins=3)

   Bases: :py:obj:`rlgym.utils.action_parsers.ActionParser`

   Simple discrete action space. All the analog actions have 3 bins by default: -1, 0 and 1.

   .. py:method:: get_action_space() -> gym.spaces.Space

      Function that returns the action space type. It will be called during the initialization of the environment.

      :return: The type of the action space


   .. py:method:: parse_actions(actions: numpy.ndarray, state: rlgym.utils.gamestates.GameState) -> numpy.ndarray

      Function that parses actions from the action space into a format that rlgym understands.
      The expected return value is a numpy float array of size (n, 8) where n is the number of agents.
      The second dimension is indexed as follows: throttle, steer, yaw, pitch, roll, jump, boost, handbrake.
      The first five values are expected to be in the range [-1, 1], while the last three values should be either 0 or 1.

      :param actions: An object of actions, as passed to the `env.step` function.
      :param state: The GameState object of the current state that were used to generate the actions.

      :return: the parsed actions in the rlgym format.



