:py:mod:`rlgym`
===============

.. py:module:: rlgym


Subpackages
-----------
.. toctree::
   :titlesonly:
   :maxdepth: 3

   communication/index.rst
   envs/index.rst
   gamelaunch/index.rst
   utils/index.rst


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   gym/index.rst
   make/index.rst
   version/index.rst


Package Contents
----------------


Functions
~~~~~~~~~

.. autoapisummary::

   rlgym.make



Attributes
~~~~~~~~~~

.. autoapisummary::

   rlgym.__version__


.. py:function:: make(game_speed = 100, tick_skip = 8, spawn_opponents = False, self_play=None, team_size = 1, gravity = 1, boost_consumption = 1, terminal_conditions = (common_conditions.TimeoutCondition(225), common_conditions.GoalScoredCondition()), reward_fn = DefaultReward(), obs_builder = DefaultObs(), action_parser = DefaultAction(), state_setter = DefaultState(), launch_preference = LaunchPreference.EPIC, use_injector = False, force_paging = False, raise_on_crash = False, auto_minimize = False)

   :param game_speed: The speed the physics will run at, leave it at 100 unless your game can't run at over 240fps
   :param tick_skip: The amount of physics ticks your action will be repeated for
   :param spawn_opponents: Whether you want opponents or not
   :param team_size: Cars per team
   :param gravity: Game gravity, 1 is normal gravity
   :param boost_consumption: Car boost consumption rate, 1 is normal consumption
   :param terminal_conditions: List of terminal condition objects (rlgym.utils.TerminalCondition)
   :param reward_fn: Reward function object (rlgym.utils.RewardFunction)
   :param obs_builder: Observation builder object (rlgym.utils.ObsBuilder)
   :param action_parser: Action parser object (rlgym.utils.ActionParser)
   :param state_setter: State Setter object (rlgym.utils.StateSetter)
   :param launch_preference: Rocket League launch preference (rlgym.gamelaunch.LaunchPreference) or path to RocketLeague executable
   :param use_injector: Whether to use RLGym's bakkesmod injector or not. Enable if launching multiple instances
   :param force_paging: Enable forced paging of each spawned rocket league instance to reduce memory utilization
                           immediately, instead of allowing the OS to slowly page untouched allocations.
                           WARNING: This will require you to potentially expand your Windows Page File [1]
                           and it may substantially increase disk activity, leading to decreased disk lifetime.
                           Use at your own peril.
                           Default is off: OS dictates the behavior.
   :param raise_on_crash: If enabled, raises an exception when Rocket League crashes instead of attempting to recover.
                           You can attempt a recovery manually by calling attempt_recovery()
   :param auto_minimize: Automatically minimize the game window when launching Rocket League
   :return: Gym object
   [1]: https://www.tomshardware.com/news/how-to-manage-virtual-memory-pagefile-windows-10,36929.html


.. py:data:: __version__
   :value: '1.2.0'

   

